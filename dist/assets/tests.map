{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/lint/app.lint-test.js","dummy/tests/lint/templates.template.lint-test.js","dummy/tests/lint/tests.lint-test.js","dummy/tests/test-helper.js","dummy/tests/unit/components/intl-tel-input-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","// import Resolver from 'ember/resolver';\n// import config from '../../config/environment';\n//\n// var resolver = Resolver.create();\n//\n// resolver.namespace = {\n//   modulePrefix: config.modulePrefix,\n//   podModulePrefix: config.podModulePrefix\n// };\n//\n// export default resolver;\ndefine(\"dummy/tests/helpers/resolver\", [], function () {\n  \"use strict\";\n});","// import Ember from 'ember';\n// import Application from '../../app';\n// import config from '../../config/environment';\n//\n// export default function startApp(attrs) {\n//   var application;\n//\n//   var attributes = Ember.merge({}, config.APP);\n//   attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n//\n//   Ember.run(function() {\n//     application = Application.create(attributes);\n//     application.setupForTesting();\n//     application.injectTestHelpers();\n//   });\n//\n//   return application;\n// }\ndefine(\"dummy/tests/helpers/start-app\", [], function () {\n  \"use strict\";\n});","define(\"dummy/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/bootstrap-affix.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/bootstrap-affix.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('dummy/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/components/bootstrap-affix.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/components/bootstrap-affix.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/templates/index.hbs should pass TemplateLint.\\n\\ndummy/templates/index.hbs\\n  95:18  error  Incorrect indentation for `code-block` beginning at L87:C12. Expected `{{/code-block}}` ending at L95:C18 to be at an indentation of 12 but was found at 3.  block-indentation\\n  87:49  error  Incorrect indentation for `// Brocfile.js\\n\\nvar app = new EmberAddon({\\n\\n  intlTelInput: {\\n    includeUtilsScript: true, // default to false\\n  },\\n\\n});` beginning at L87:C49. Expected `// Brocfile.js\\n\\nvar app = new EmberAddon({\\n\\n  intlTelInput: {\\n    includeUtilsScript: true, // default to false\\n  },\\n\\n});` to be at an indentation of 14 but was found at 49.  block-indentation\\n  136:50  error  Incorrect indentation for `code-block` beginning at L128:C12. Expected `{{/code-block}}` ending at L136:C50 to be at an indentation of 12 but was found at 33.  block-indentation\\n  128:50  error  Incorrect indentation for `{{intl-tel-input\\n  allowExtensions=true\\n  value=value\\n  selectedCountryData=selectedCountryData\\n  number=number\\n  extension=extension\\n  numberType=numberType\\n  isValidNumber=isValidNumber\\n  validationError=validationError}}` beginning at L128:C50. Expected `{{intl-tel-input\\n  allowExtensions=true\\n  value=value\\n  selectedCountryData=selectedCountryData\\n  number=number\\n  extension=extension\\n  numberType=numberType\\n  isValidNumber=isValidNumber\\n  validationError=validationError}}` to be at an indentation of 14 but was found at 49.  block-indentation\\n  196:16  error  Incorrect indentation for `code-block` beginning at L185:C12. Expected `{{/code-block}}` ending at L196:C16 to be at an indentation of 12 but was found at 0.  block-indentation\\n  185:49  error  Incorrect indentation for `// controller\\n\\ngeoIpLookupFunc: function(callback) {\\n  $.getJSON(\\'//www.telize.com/geoip\\')\\n   .always(function(resp) {\\n     if (!resp || !resp.country_code) {\\n       callback(\\'\\');\\n     }\\n\\n     callback(resp.country_code);\\n   });\\n}` beginning at L185:C49. Expected `// controller\\n\\ngeoIpLookupFunc: function(callback) {\\n  $.getJSON(\\'//www.telize.com/geoip\\')\\n   .always(function(resp) {\\n     if (!resp || !resp.country_code) {\\n       callback(\\'\\');\\n     }\\n\\n     callback(resp.country_code);\\n   });\\n}` to be at an indentation of 14 but was found at 49.  block-indentation\\n  199:46  error  Incorrect indentation for `code-block` beginning at L197:C12. Expected `{{/code-block}}` ending at L199:C46 to be at an indentation of 12 but was found at 29.  block-indentation\\n  197:50  error  Incorrect indentation for `{{intl-tel-input\\n  defaultCountry=\"auto\"\\n  geoIpLookup=geoIpLookupFunc}}` beginning at L197:C50. Expected `{{intl-tel-input\\n  defaultCountry=\"auto\"\\n  geoIpLookup=geoIpLookupFunc}}` to be at an indentation of 14 but was found at 49.  block-indentation\\n  15:6  error  HTML comment detected  no-html-comments\\n  153:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  155:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  157:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  159:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  161:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  163:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  165:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  167:18  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  49:35  error  you must use double quotes in templates  quotes\\n  65:35  error  you must use double quotes in templates  quotes\\n  87:35  error  you must use double quotes in templates  quotes\\n  96:35  error  you must use double quotes in templates  quotes\\n  128:35  error  you must use double quotes in templates  quotes\\n  153:36  error  you must use double quotes in templates  quotes\\n  155:69  error  you must use double quotes in templates  quotes\\n  157:69  error  you must use double quotes in templates  quotes\\n  159:73  error  you must use double quotes in templates  quotes\\n  161:38  error  you must use double quotes in templates  quotes\\n  163:44  error  you must use double quotes in templates  quotes\\n  165:38  error  you must use double quotes in templates  quotes\\n  165:45  error  you must use double quotes in templates  quotes\\n  167:56  error  you must use double quotes in templates  quotes\\n  185:35  error  you must use double quotes in templates  quotes\\n  197:35  error  you must use double quotes in templates  quotes\\n  4:66  error  Self-closing a void element is redundant  self-closing-void-elements\\n  41:8  error  Self-closing a void element is redundant  self-closing-void-elements\\n  79:8  error  Self-closing a void element is redundant  self-closing-void-elements\\n  110:8  error  Self-closing a void element is redundant  self-closing-void-elements\\n  177:8  error  Self-closing a void element is redundant  self-closing-void-elements\\n  213:8  error  Self-closing a void element is redundant  self-closing-void-elements\\n');\n  });\n});","define(\"dummy/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/intl-tel-input-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/intl-tel-input-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/components/intl-tel-input-test\", [\"ember-qunit\", \"ember-test-helpers/wait\", \"sinon\"], function (_emberQunit, _wait, _sinon) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForComponent)('intl-tel-input', 'Unit | Component | intl-tel-input', {\n    unit: true,\n\n    beforeEach() {\n      _sinon.default.spy(Ember.$.fn, 'intlTelInput');\n    },\n\n    afterEach() {\n      Ember.$.fn.intlTelInput.restore();\n    }\n\n  });\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(4); // Creates the component instance\n\n    var component = this.subject();\n    assert.equal(component._state, 'preRender'); // Renders the component to the page\n\n    this.render();\n    assert.equal(component._state, 'inDOM');\n    var element = component.$()[0];\n    assert.equal(element.tagName.toLowerCase(), 'input');\n    assert.equal(element.type.toLowerCase(), 'tel');\n  });\n  (0, _emberQunit.test)('setupIntlTelInput', function (assert) {\n    assert.expect(1);\n    this.render();\n    assert.ok(Ember.$.fn.intlTelInput.called, 'intlTelInput called');\n  });\n  (0, _emberQunit.test)('properties', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    component.setProperties({\n      allowExtensions: 'allow extensions',\n      autoFormat: 'auto format',\n      autoHideDialCode: 'auto hide dial code',\n      autoPlaceholder: 'auto placeholder',\n      defaultCountry: 'us',\n      geoIpLookup: 'geo ip lookup',\n      nationalMode: 'national mode',\n      numberType: 'MOBILE',\n      onlyCountries: ['us'],\n      preferredCountries: ['us']\n    });\n    this.render();\n    assert.deepEqual({\n      allowExtensions: 'allow extensions',\n      autoFormat: 'auto format',\n      autoHideDialCode: 'auto hide dial code',\n      autoPlaceholder: 'auto placeholder',\n      defaultCountry: 'us',\n      geoIpLookup: 'geo ip lookup',\n      nationalMode: 'national mode',\n      numberType: 'MOBILE',\n      onlyCountries: ['us'],\n      preferredCountries: ['us']\n    }, Ember.$.fn.intlTelInput.args[0][0], 'intlTelInput called with arguments');\n  });\n  (0, _emberQunit.test)('it syncs the component value to the input value', function (assert) {\n    assert.expect(3);\n    var component = this.subject();\n    this.render();\n    Ember.run(() => {\n      component.set('value', 'old value');\n    });\n    var el = component.$();\n    assert.equal(el.val(), 'old value');\n    Ember.run(() => {\n      el.val('new value');\n      el.change();\n    });\n    return (0, _wait.default)().then(() => {\n      assert.equal(el.val(), 'new value');\n      assert.equal(component.get('value'), 'new value');\n    });\n  });\n  (0, _emberQunit.test)('isValidNumber', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    component.set('value', '12065555555');\n    this.render();\n    assert.ok(component.get('isValidNumber'), 'isValidNumber');\n  });\n  (0, _emberQunit.test)('selectedCountryData', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    component.set('onlyCountries', ['us']);\n    component.set('defaultCountry', 'us');\n    this.render();\n    assert.deepEqual(component.get('selectedCountryData'), {\n      'areaCodes': null,\n      'dialCode': '1',\n      'iso2': 'us',\n      'name': 'United States',\n      'priority': 0\n    });\n  });\n  (0, _emberQunit.test)('extension', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    component.set('numberFormat', 'E14');\n    component.set('value', '+12065555555 ext. 12345');\n    this.render();\n    assert.equal(component.get('extension'), '12345');\n  });\n  (0, _emberQunit.test)('number', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    component.set('numberFormat', 'E14');\n    component.set('value', '1 206 555 5555 ext. 12345');\n    this.render();\n    assert.equal(component.get('number'), '+1206555555512345');\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}